1. project structure:
2. Project package install
3. route configure
4. app.js config
5. postman initial config
6. email credential config
7. declare model properties

// class 2
// users
1. user registration, only usersController
2. user login using usersController and tokenUtility tokenEncode, 
3. profile details, for this authMiddleware and tokenDecode. also when we  login and get a token. we will save this token in the postman > task manager rest api > variables > {{TOKEN}}. then we will use it in the headers of the all the route from here.
open postman > any route after login > headers > key : token, value : {{TOKEN}}.

4. profile update, also need authmiddlware in the api, usersController, also need to give token in the headers in postman.
5. EmailVerify: for this we need email utility and usersController, token doesn't need in the postman headers.
6. codeVerify: usersController : for this we need email utility and usersController, token doesn't need in the postman headers.

7. resetPassword: usersController. token doesn't need in the postman headers.

//tasks
1. CreateTask: just in taskcontroller,authmiddlware in the api(becuase user need to be logged in to create task), also use of token in the postman header.
2. updateTaskStatus: taskcontroller,authmiddlware in the api(becuase user need to be logged in to create task),, also use of token in the postman header.
3. TaskListByStatus:  taskcontroller,authmiddlware in the api(becuase user need to be logged in to create task),, also use of token in the postman header.
4. DeleteTask:  taskcontroller,authmiddlware in the api(becuase user need to be logged in to create task),, also use of token in the postman header.
5. CountTask:  taskcontroller,authmiddlware in the api(becuase user need to be logged in to create task),, also use of token in the postman header.

project Order Summary:
1. config
2. model
3. controllers
4. middlewares
5. routes
6. utility
7. app.js


Here is an explanation of the typical purpose of each folder and the `app.js` file in a backend API project:

### 1. **config**
- **Purpose**: This folder usually contains configuration files for the project. It can include settings for the database connection, environment variables, server configuration, and other global settings.
- **Examples**: 
  - `database.js`: Contains database connection settings (e.g., URL, credentials).
  - `env.js`: Reads and sets environment variables (e.g., from a `.env` file).

### 2. **controllers**
- **Purpose**: Controllers contain functions that handle incoming HTTP requests and provide responses. They manage the logic that should be executed for each route.
- **Examples**: 
  - `taskController.js`: Handles task-related operations like creating, reading, updating, and deleting tasks.

### 3. **middlewares**
- **Purpose**: Middleware functions are functions that execute during the request-response cycle before the final request handler. They are used for tasks such as authentication, logging, error handling, and request parsing.
- **Examples**: 
  - `authMiddleware.js`: Checks if a user is authenticated.
  - `errorHandler.js`: Catches and processes errors.

### 4. **model**
- **Purpose**: This folder contains the data models for the project, defining the structure and schema of the data used in the application. Models interact with the database to perform CRUD (Create, Read, Update, Delete) operations.
- **Examples**: 
  - `taskModel.js`: Defines the schema and methods for task entities (e.g., using Mongoose for MongoDB).

### 5. **utility**
- **Purpose**: Contains utility functions or helper methods that can be used across different parts of the application. These are often generic functions that don't fit into other specific folders.
- **Examples**: 
  - `helpers.js`: General-purpose functions (e.g., formatting dates, generating random IDs).
  - `validators.js`: Functions to validate input data.

### 6. **routes**
- **Purpose**: This folder defines the routing for the application. Routes determine which controller functions are called based on the HTTP request method and endpoint.
- **Examples**: 
  - `taskRoutes.js`: Maps endpoints (e.g., `/tasks`) to corresponding controller functions.

### 7. **app.js**
- **Purpose**: This is usually the main entry point of the application. It sets up the Express server, initializes middleware, connects to the database, and registers routes. It might also start the server by listening to a specific port.
- **Key Tasks**:
  - Importing required modules.
  - Configuring middleware.
  - Setting up routes.
  - Starting the server.

This structure helps keep the project modular, organized, and maintainable, making it easier to scale and collaborate with others.